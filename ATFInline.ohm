ATFInline {

    lineTerminator
        = "\r\n"
        | "\n"

    nonLineTerminator (a character that is not a newline)
        = ~lineTerminator any

    lowercaseVowel
        = "a"
        | "e"
        | "i"
        | "u"

    uppercaseVowel
        = "A"
        | "E"
        | "I"
        | "U"

    aleph
        = "ʾ"
        | "'"

    timesChar
        = "×"

    cdliSpecialLowercase
        = "sz"
        | "ts"
        | "s,"
        | "t,"

    cdliSpecialUppercase
        = "SZ"
        | "TS"
        | "S,"
        | "T,"

    lowercaseConsonant
        = "b"
        | "d"
        | "g"
        | "ḫ"
        | "h"
        | "k"
        | "l"
        | "m"
        | "n"
        | "p"
        | "q"
        | "r"
        | "s"
        | "ṣ"
        | "š"
        | "ś"
        | "t"
        | "ṭ"
        | "w"
        | "y"
        | "z"

    uppercaseConsonant
        = "B"
        | "D"
        | "G"
        | "Ḫ"
        | "H"
        | "K"
        | "L"
        | "M"
        | "N"
        | "P"
        | "Q"
        | "R"
        | "S"
        | "Ṣ"
        | "Š"
        | "Ś"
        | "T"
        | "Ṭ"
        | "W"
        | "Y"
        | "Z"
        | "Ŋ"

    uppercaseCharacter
        = uppercaseVowel | cdliSpecialUppercase  | uppercaseConsonant | aleph
    lowercaseCharacter
        = lowercaseVowel | cdliSpecialLowercase | lowercaseConsonant | aleph

    elementalUppercaseConsonant
        = cdliSpecialUppercase | uppercaseConsonant | aleph

    elementalLowercaseConsonant
        = cdliSpecialLowercase | lowercaseConsonant | aleph

    openBracket
        = "["
    closedBracket
        = "]"


    // The following is taken straight from JTF
    valueSymbolPrefix
        = "d" | "m" | "f" | "p" | aleph | "I"

    nonValueSymbol
        = uppercaseCharacter | lowercaseCharacter

    valueSymbolSolo
        = valueSymbolPrefix nonValueSymbol

    bracketedUppercaseConsonant
        = openBracket elementalUppercaseConsonant closedBracket

    bracketedLowercaseConsonant
        = openBracket elementalLowercaseConsonant closedBracket

    plainLowercaseValue
        = (bracketedLowercaseConsonant? lowercaseVowel)+
        | (valueSymbolSolo nonValueSymbol)

    plainUppercaseValue
        = (bracketedUppercaseConsonant? uppercaseVowel)+ -- valueSymbol
        | nonValueSymbol -- nonValueSymbol
    // End JTF transcribed simple values


    // The following token definitions are taken from
    // JTF, with some name modifications
    subscriptDigit
        = "₀"|"₁"|"₂"|"₃"|"₄"|"₅"|"₆"|"₇"|"₈"|"₉"

    fraction
        = "1/2" | "1/3" | "1/4" | "2/3" | "5/6" | "1/8"

    numericTokens
        = fraction
        | subscriptDigit*
        | digit*

    numericEllipsesLowerToken
        = "n" nonValueSymbol
    numericEllipsesUpperToken
        = "N" nonValueSymbol
    numericEllipsesPlhdPlusToken
        = ("n" | "N") "+" digit* nonValueSymbol
    // End numeric tokens from JTF

    // Glosses definitions taken from JTF,
    // with some name modifications
    linguisticGlossOpen
        = "{{"
    linguisticGlossClosed
        = "}}"
    documentGlossOpen
        = "{("
    documentGlossClosed
        = ")}"

    // The close is the same as
    // the determinative gloss close
    scriptGlossOpen
        = "{%" digit

    determinativeGlossOpen
        = "{"
    determinativeGlossClosed
        = "}"
        
    // The grapheme is present but must be
    // excised for the correct meaning
    presenceExciseGlossOpen
        = "<<"
    presenceExciseGlossClosed
        = ">>"

    afterBoundaryGlossOpen
        = "<("
    afterBoundaryGlossClosed
        = ")>"
    afterGraphemeGlossOpen
        = "<("
    afterGraphemeGlossClosed
        = ")>"

    // The graphemes must be supplied for
    // the meaning but are not present
    presenceNeededGlossOpen
        = "<"
    presenceNeededGlossClosed
        = ">"
    
    inlineCommentOpen
        = "(#"
    inlineCommentClosed
        = "#)"

    // GDL Modifier Tokens
    modifierToken
        = "@v" -- variant
        | "@c" -- curved
        | "@f" -- flat
        | "@g" -- gunu
        | "@s" -- sheshig
        | "@t" -- tenu
        | "@n" -- nutillu
        | "@z" -- zidatenu
        | "@k" -- kabatenu
        | "@r" -- verticallyReflected
        | "@h" -- horizontallyReflected
        | "@" digit+ -- rotated

    // Allograph tokens
    allographCharacter
        = ~("x" | "X") (letter | digit)
    allograph
        = "~" allographCharacter+ -- custom
        | "~t" -- token
        | "~v" -- variant

    // Grapheme Flags, which appear at the
    // end of signs or values, but not within
    // compound signs (must appear after compound)
    flag
        = "!"
        | "?"
        | "*"
        | "#"

    // GDL Operators
    operator
        = "." -- beside
        | "+" -- joining
        | (timesChar | "x") -- containing
        | "&" -- above
        | "%" -- crossing
        | "@" -- opposing
        | "3" (timesChar | "x") -- repeatedThree
        | "4" (timesChar | "x") -- repeatedFour
        | ":" -- reversed // From JTF
        | "/" -- alternative // From JTF

    // Field Tokens
    // See: http://oracc.ub.uni-muenchen.de/doc/help/editinginatf/lexicaltexts/index.html#h_fields
    fieldTokens
        = (",!sv" | "#") -- signValue // a sign value follows
        | (",!pr" | "\"") -- pronunciation // a pronunciation follows
        | (",!sg" | "~") -- sign // a sign follows
        | (",!sn" | "|") -- ancientSignName // An ancient sign name follows
        | (",!eq" | "=") -- equivalent // Column that follows is  a translation or synonym
        | (",!wp" | "!wp" | "^") -- default // A word or phrase follows (is the default column type)

    builtinSignListName
        = "ABZ" digit+
        | "BAU" digit+
        | "HZL" digit+
        | "KWU" digit+
        | "LAK" digit+
        | "MEA" digit+
        | "MZL" digit+
        | "REC" digit+
        | "RSP" digit+
        | "ZATU" digit+

    genericSignListName
        = upper upper? "SL" digit+

    numericSignListName
        = "N" digit+

    signListName
        = builtinSignListName
        | numericSignListName
        | genericSignListName

    basicSignName
        = "$"? "~"? uppercaseCharacter+ (digit+ | subscriptDigit+)? -- oracc
        | "$"? "~" "_" uppercaseCharacter+ (digit+ | subscriptDigit+)? "_" -- cdli

    signName
        = signListName
        | basicSignName

    basicSignValue
        = lowercaseCharacter+ (digit+ | subscriptDigit+)?

    qualifiedSignValue
        = basicSignValue ("x" | timesChar) "(" signName ")"

    signValue
        = qualifiedSignValue
        | basicSignValue

    signValueFlagged
        = signValue flag+

    signNameFlagged
        = signName flag+
        | qualifiedSignName flag+
        | compoundSignName flag+

    qualifiedSignName
        = basicSignName "X" "(" signName ")"

    repetitionSignValue
        = digit+ "(" signValue ")" -- strict
        | "n+" digit+ "(" signValue ")" -- damaged
        | "n" digit+ "(" signValue ")" -- notDeterminable

    repetitionSignName
        = digit+ "(" signName ")" -- strict
        | "N+" digit+ "(" signName ")" -- damaged
        | "N" "(" signName ")" -- nonDeterminable

    signNameWithModifier
        = signName modifierToken+

    signValueWithModifier
        = signValue modifierToken+

    groupedSignName
        = "(" signName operator signName ")"

    compoundSignName
        = "|" signName operator signName "|"
        | "|" groupedSignName operator signName "|"
        | "|" signName operator groupedSignName "|"

    punctuationSignName
        = "P1" | "P2" | "P3" | "P4"

    punctuation
        = "/" "(" punctuationSignName ")" -- wordDividerQualified
        | "*" "(" (signName | signValue) ")" -- bulletQualified
        | "/" -- wordDivider
        | "*" -- bullet
        | ":'" -- twoWedgeColon
        | ":\"" -- diagonalColon
        | ":." -- tripleWedgeColon
        | "::" -- unspecifiedColon
        | ":" -- verticalColon

    shift
        = "%" lower+
        | "%" lower
        | "%" digit


    // For our purposes, a single grapheme is anything
    // joined by a hyphen, backslash, or a colon,
    // according to the "Words" section of the ORACC
    // primer.
    signSeparator
        = "-"
        | "/"
        | ":"

    signReading
        = signNameFlagged
        | signValueFlagged
        | compoundSignName
        | repetitionSignName
        | repetitionSignValue
        | qualifiedSignName
        | signNameWithModifier
        | signValueWithModifier
        | signName
        | signValue
        | glossedSignReading

    glossedSignReading
        = linguisticGlossOpen signReading linguisticGlossClosed -- linguistic
        | documentGlossOpen signReading documentGlossClosed -- document
        | afterBoundaryGlossOpen signReading afterBoundaryGlossClosed -- afterBoundary
        | afterGraphemeGlossOpen signReading afterGraphemeGlossClosed -- afterGrapheme
        | presenceExciseGlossOpen signReading presenceExciseGlossClosed -- presenceExcise
        //| scriptGlossOpen signReading determinativeGlossClosed -- script
        | determinativeGlossOpen signReading determinativeGlossClosed -- determinative
        | presenceNeededGlossOpen signReading presenceNeededGlossClosed -- presenceNeeded
        

    grapheme
        = signReading signSeparator grapheme -- complex
        | signReading signSeparator signReading -- dual
        | signReading -- single
        | glossedGrapheme -- glossed

    glossedGrapheme
        = linguisticGlossOpen grapheme linguisticGlossClosed -- linguistic
        | documentGlossOpen grapheme documentGlossClosed -- document
        | afterBoundaryGlossOpen grapheme afterBoundaryGlossClosed -- afterBoundary
        | afterGraphemeGlossOpen grapheme afterGraphemeGlossClosed -- afterGrapheme
        | presenceExciseGlossOpen grapheme presenceExciseGlossClosed -- presenceExcise
        //| scriptGlossOpen grapheme determinativeGlossClosed -- script
        | determinativeGlossOpen grapheme determinativeGlossClosed -- determinative
        | presenceNeededGlossOpen grapheme presenceNeededGlossClosed -- presenceNeeded

    unknownGrapheme
        = ~signSeparator nonWhitespace+

    InlineComment
        = inlineCommentOpen nonLineTerminator+ inlineCommentClosed

    Word
        = grapheme
        | shift
        | punctuation
        | InlineComment
        | unknownGrapheme

    Words
        = Word+

    // Basic whitespace and line termination handling.
    // Note that we override the default Ohm definition
    // of `space` to only be spaces or tabs, and NOT
    // any of the newline characters
    space := whitespace
    whitespace
      = "\t"
      | "\x0B"    -- verticalTab
      | "\x0C"    -- formFeed
      | " "
      | "\u00A0"  -- noBreakSpace
      | "\uFEFF"  -- byteOrderMark

    nonWhitespace
     = ~whitespace ~lineTerminator any

}
